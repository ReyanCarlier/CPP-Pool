################################################################################
#                                    CONFIG                                    #
################################################################################

CXX = c++

TARGET = fragtrap

CXXFLAGS = -Wall -Werror -Wextra -std=c++98 -Wshadow -Wno-shadow

################################################################################
#                                   SOURCES                                    #
################################################################################

SRCS_FILES	:=		main \
					ClapTrap \
					ScavTrap \
					FragTrap

SRCS_FILES	:= 		$(addsuffix .cpp, $(SRCS_FILES))

SRCS_DIR	= 		src/

VPATH		= 		$(SRCS_DIR)

################################################################################
#                                  HEADERS                                     #
################################################################################

HEADS_DIR 	= 		include/

HEADS_DIRN 	= 		include

################################################################################
#                                  OBJECTS                                     #
################################################################################

OBJS_DIR	= 		obj/

OBJS_DIRN	= 		obj/

OBJS		=		$(patsubst %.cpp,$(OBJS_DIR)%.o,${SRCS_FILES})

OBJS_DUP	=		$(patsubst %.cpp,%.o,${SRCS_FILES})

NEW_OBJS	=		0

################################################################################
#                                  DEPS                                     #
################################################################################

DEPS_DIR 	= 		deps/

DEPS_DIRN	=		deps/

DEPS		=		$(patsubst %.o,${DEPS_DIR}%.d,${OBJS_DUP})

NEW_DEPS	=		0

################################################################################
#                                   RULES                                      #
################################################################################

CLR_RMV		:=		\033[0m
RED		    :=		\033[1;31m
GREEN		:=		\033[1;32m
YELLOW		:=		\033[1;33m
BLUE		:=		\033[1;34m
CYAN 		:=		\033[1;36m
RM		    :=		rm -rf

all: $(TARGET)

re: fclean all

${TARGET}:	${DEPS} | ${OBJS}
			@echo "$(BLUE)Generated $(NEW_OBJS) objects successfully ! ‚úîÔ∏è"
			@echo "$(GREEN)Compilation ${CLR_RMV}of ${YELLOW}$(TARGET) ${CLR_RMV}binary ..."
			@ $(CXX) $(CXXFLAGS) -I$(HEADS_DIR) $(OBJS) -o $(TARGET)
			@echo "$(YELLOW)$(TARGET) $(GREEN)binary created[0m ‚úîÔ∏è"

$(OBJS_DIR)%.o: %.cpp | makedir_objs
	@if [ ! $(NEW_OBJS) != 0 ]; then echo "$(BLUE)Generating $(YELLOW)$(TARGET) $(BLUE)objects :"; else : ; fi
	$(eval NEW_OBJS=$(shell echo $$(($(NEW_OBJS)+1))))
				@ echo "$(CLR_RMV)- $(CYAN)$@";
				@ $(CXX) $(CXXFLAGS) -I$(HEADS_DIR) -c $< -o $@

TMP_FILE =

${DEPS_DIR}%.d : %.cpp | makedir_deps
	@if [ ! $(NEW_DEPS) != 0 ]; then echo "$(BLUE)Generating $(YELLOW)$(TARGET) $(BLUE)dependencies :"; else : ; fi
	$(eval NEW_DEPS=$(shell echo $$(($(NEW_DEPS)+1))))
				@ echo "$(CLR_RMV)- $(CYAN)$@";
				@ echo -n "$@ " > $@.tmp
	$(eval TMP_FILE=$(shell echo $@ | sed "s/$(DEPS_DIR)$(OBJS_DIR)"g))
	$(eval TMP_FILE=$(shell echo $(TMP_FILE) | sed "s/.d/.o/g"))
				@ $(CXX) -I$(HEADS_DIR) $(CXXFLAGS) -MM -MP -MT $(TMP_FILE) $< >> $@.tmp
				@ mv $@.tmp $@

makedir_objs:
	@if [ ! -e "$(OBJS_DIRN)" ]; then mkdir -p $(OBJS_DIRN); echo "$(GREEN)Creation ${CLR_RMV}of ${CYAN}objects ${CLR_RMV}directory ‚úîÔ∏è"; fi

makedir_deps:
	@if [ ! -e "$(DEPS_DIRN)" ]; then echo "$(GREEN)Creation ${CLR_RMV}of ${CYAN}depends ${CLR_RMV}directory ‚úîÔ∏è"; mkdir -p $(DEPS_DIRN); fi

clean:
	@if [ ! -e "$(OBJS_DIR)" ]; then echo "$(YELLOW)$(TARGET) $(CLR_RMV)objects folder already $(RED)deleted $(CLR_RMV)! ‚úîÔ∏è" ; else ${RM} $(OBJS_DIR); echo "$(RED)Deleted $(YELLOW)$(TARGET) $(BLUE)objects $(CLR_RMV)folder ‚úîÔ∏è"; fi
	@if [ ! -e "${DEPS_DIRN}" ]; then echo "$(YELLOW)$(TARGET) $(CLR_RMV)dependencies folder already $(RED)deleted $(CLR_RMV)! ‚úîÔ∏è" ; else ${RM} ${DEPS_DIRN}; echo "$(RED)Deleted $(YELLOW)$(TARGET) $(BLUE)dependencies $(CLR_RMV)folder ‚úîÔ∏è"; fi
			
fclean: 	clean
	@if [ ! -e "$(TARGET)" ]; then echo "$(YELLOW)$(TARGET) $(CLR_RMV)binary already $(RED)deleted $(CLR_RMV)! ‚úîÔ∏è"; else echo "$(RED)Deleted $(YELLOW)$(TARGET) $(CLR_RMV)binary ‚úîÔ∏è"; fi
			@ ${RM} ${TARGET}

.PHONY: clean fclean re all

-include $(DEPS)

%.o: %.cpp Makefile
	@ $(CXX) $(CXXFLAGS) -MMD -MP $< -o $@